
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\014\000\002\002\004\000\002\003" +
    "\002\000\002\004\002\000\002\005\004\000\002\005\002" +
    "\000\002\013\003\000\002\006\005\000\002\007\004\000" +
    "\002\007\002\000\002\010\003\000\002\010\010\000\002" +
    "\010\006\000\002\010\010\000\002\010\011\000\002\010" +
    "\007\000\002\010\007\000\002\010\007\000\002\010\011" +
    "\000\002\010\007\000\002\010\013\000\002\010\003\000" +
    "\002\011\003\000\002\011\005\000\002\011\004\000\002" +
    "\011\005\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\005\000\002\012\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\014\004\001\002\000\004\024\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\051\010\001\002\000\004\050\011\001\002\000" +
    "\004\047\012\001\002\000\026\003\uffff\004\uffff\005\uffff" +
    "\006\uffff\025\uffff\043\uffff\046\uffff\047\uffff\052\uffff\053" +
    "\uffff\001\002\000\026\003\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\025\ufffc\043\ufffc\046\ufffc\047\ufffc\052\ufffc\053\016\001" +
    "\002\000\024\003\ufff8\004\ufff8\005\ufff8\006\ufff8\025\ufff8" +
    "\043\ufff8\046\ufff8\047\ufff8\052\ufff8\001\002\000\026\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\025\ufffc\043\ufffc\046\ufffc" +
    "\047\ufffc\052\ufffc\053\016\001\002\000\004\052\ufffb\001" +
    "\002\000\004\052\020\001\002\000\004\043\021\001\002" +
    "\000\026\003\ufffa\004\ufffa\005\ufffa\006\ufffa\025\ufffa\043" +
    "\ufffa\046\ufffa\047\ufffa\052\ufffa\053\ufffa\001\002\000\024" +
    "\003\ufffd\004\ufffd\005\ufffd\006\ufffd\025\ufffd\043\ufffd\046" +
    "\ufffd\047\ufffd\052\ufffd\001\002\000\024\003\033\004\031" +
    "\005\024\006\025\025\034\043\035\046\026\047\030\052" +
    "\032\001\002\000\004\051\127\001\002\000\004\051\117" +
    "\001\002\000\004\002\ufffe\001\002\000\024\003\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\025\ufff9\043\ufff9\046\ufff9\047\ufff9" +
    "\052\ufff9\001\002\000\026\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\025\uffff\043\uffff\046\uffff\047\uffff\052\uffff\053\uffff" +
    "\001\002\000\004\051\067\001\002\000\004\033\055\001" +
    "\002\000\030\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\025\uffec\043\uffec\046\uffec\047\uffec\050\uffec\052\uffec\001" +
    "\002\000\004\051\036\001\002\000\030\003\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\025\ufff7\043\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\052\ufff7\001\002\000\014\027\043\030\037" +
    "\032\042\051\041\052\040\001\002\000\014\035\uffe4\036" +
    "\uffe4\037\uffe4\043\uffe4\050\uffe4\001\002\000\014\035\uffe6" +
    "\036\uffe6\037\uffe6\043\uffe6\050\uffe6\001\002\000\012\027" +
    "\043\030\037\051\041\052\040\001\002\000\004\050\051" +
    "\001\002\000\014\035\uffe5\036\uffe5\037\uffe5\043\uffe5\050" +
    "\uffe5\001\002\000\006\035\045\050\046\001\002\000\012" +
    "\027\043\030\037\051\041\052\040\001\002\000\004\043" +
    "\047\001\002\000\030\003\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\025\ufff2\043\ufff2\046\ufff2\047\ufff2\050\ufff2\052" +
    "\ufff2\001\002\000\014\035\uffe2\036\uffe2\037\uffe2\043\uffe2" +
    "\050\uffe2\001\002\000\004\043\052\001\002\000\030\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\025\ufff1\043\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\052\ufff1\001\002\000\006\035" +
    "\045\050\054\001\002\000\014\035\uffe3\036\uffe3\037\uffe3" +
    "\043\uffe3\050\uffe3\001\002\000\014\026\056\027\043\030" +
    "\037\051\041\052\040\001\002\000\004\051\061\001\002" +
    "\000\006\035\045\043\060\001\002\000\030\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\025\ufff5\043\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\052\ufff5\001\002\000\006\032\062\050" +
    "\063\001\002\000\004\050\065\001\002\000\004\043\064" +
    "\001\002\000\030\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\025\ufff4\043\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4" +
    "\001\002\000\004\043\066\001\002\000\030\003\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\025\ufff3\043\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\052\ufff3\001\002\000\016\027\043\030" +
    "\037\031\070\040\071\051\072\052\040\001\002\000\010" +
    "\036\uffeb\043\uffeb\050\uffeb\001\002\000\016\027\043\030" +
    "\037\031\070\040\071\051\072\052\040\001\002\000\016" +
    "\027\043\030\037\031\070\040\071\051\072\052\040\001" +
    "\002\000\006\036\077\050\100\001\002\000\006\035\045" +
    "\037\075\001\002\000\012\027\043\030\037\051\041\052" +
    "\040\001\002\000\012\035\045\036\uffe7\043\uffe7\050\uffe7" +
    "\001\002\000\016\027\043\030\037\031\070\040\071\051" +
    "\072\052\040\001\002\000\022\003\033\004\031\005\024" +
    "\006\025\025\034\043\035\047\030\052\032\001\002\000" +
    "\030\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\102\025\ufff0" +
    "\043\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\001\002\000" +
    "\022\003\033\004\031\005\024\006\025\025\034\043\035" +
    "\047\030\052\032\001\002\000\030\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\025\uffef\043\uffef\046\uffef\047\uffef" +
    "\050\uffef\052\uffef\001\002\000\010\036\uffe8\043\uffe8\050" +
    "\uffe8\001\002\000\006\036\077\050\107\001\002\000\010" +
    "\035\045\037\075\050\054\001\002\000\010\036\uffea\043" +
    "\uffea\050\uffea\001\002\000\010\036\uffe9\043\uffe9\050\uffe9" +
    "\001\002\000\026\003\ufffc\004\ufffc\005\ufffc\006\ufffc\025" +
    "\ufffc\043\ufffc\046\ufffc\047\ufffc\052\ufffc\053\016\001\002" +
    "\000\024\003\ufff8\004\ufff8\005\ufff8\006\ufff8\025\ufff8\043" +
    "\ufff8\046\ufff8\047\ufff8\052\ufff8\001\002\000\024\003\033" +
    "\004\031\005\024\006\025\025\034\043\035\046\114\047" +
    "\030\052\032\001\002\000\030\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\025\ufffe\043\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\052\ufffe\001\002\000\030\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\025\ufff6\043\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\052\ufff6\001\002\000\004\002\001\001\002\000\022" +
    "\003\033\004\031\005\024\006\025\025\034\043\035\047" +
    "\030\052\032\001\002\000\004\043\121\001\002\000\016" +
    "\027\043\030\037\031\070\040\071\051\072\052\040\001" +
    "\002\000\006\036\077\043\123\001\002\000\022\003\033" +
    "\004\031\005\024\006\025\025\034\043\035\047\030\052" +
    "\032\001\002\000\004\050\125\001\002\000\022\003\033" +
    "\004\031\005\024\006\025\025\034\043\035\047\030\052" +
    "\032\001\002\000\030\003\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\025\uffed\043\uffed\046\uffed\047\uffed\050\uffed\052" +
    "\uffed\001\002\000\016\027\043\030\037\031\070\040\071" +
    "\051\072\052\040\001\002\000\006\036\077\050\131\001" +
    "\002\000\022\003\033\004\031\005\024\006\025\025\034" +
    "\043\035\047\030\052\032\001\002\000\030\003\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\025\uffee\043\uffee\046\uffee" +
    "\047\uffee\050\uffee\052\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\012\001\001\000" +
    "\010\005\013\006\014\013\016\001\001\000\004\007\022" +
    "\001\001\000\010\005\021\006\014\013\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\115\001\001" +
    "\000\002\001\001\000\004\003\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\072\012" +
    "\073\001\001\000\002\001\001\000\006\011\107\012\073" +
    "\001\001\000\006\011\104\012\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\075\001\001\000\002" +
    "\001\001\000\006\011\103\012\073\001\001\000\004\010" +
    "\100\001\001\000\002\001\001\000\004\010\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\111\006\014\013\016\001\001\000\004\007\112\001" +
    "\001\000\004\010\026\001\001\000\004\004\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\117\001" +
    "\001\000\002\001\001\000\006\011\121\012\073\001\001" +
    "\000\002\001\001\000\004\010\123\001\001\000\002\001" +
    "\001\000\004\010\125\001\001\000\002\001\001\000\006" +
    "\011\127\012\073\001\001\000\002\001\001\000\004\010" +
    "\131\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  public static void main(String[] args) {
            java.io.Reader buffer;
                try {
                    if (args.length <= 1) buffer=new java.io.InputStreamReader(System.in);
                    else {
                        buffer = new java.io.InputStreamReader(new java.io.FileInputStream(args[0]));
                    }
                    Lexer lexer = new Lexer(buffer);
                    parser p = new parser(lexer);
//                    p.debug_parse();
                    p.parse();

          } catch (java.io.FileNotFoundException e) {
              System.out.println("File not found : \"" + args[0] + "\"");
          } catch (java.io.IOException e) {
              System.out.println("IO error scanning file \"" + args[0] + "\"");
              System.out.println(e);
          } catch (Exception e) {
              System.out.println("Unexpected exception:");
              e.printStackTrace();

          }



      }
       void checkDefined(SymbolEntry id,boolean defined){
            if(defined && id.type==ValueType.UNKNOWN) ErrorHandler.error_varNotDefined(this,id);
            if(!defined && id.type!=ValueType.UNKNOWN) ErrorHandler.error_varDefined(this,id);
       }
       ValueType checkType(ValueType t1, ValueType t2) {
               if (t1 == t2) return t1;
               else ErrorHandler.error_type(this, t1);
               return  ValueType.UNKNOWN;

           }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // app ::= VOID MAIN LPAR RPAR LBLOCK start_scope declList stmtList RBLOCK end_scope 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("app",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= app EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // start_scope ::= 
            {
              Object RESULT =null;
		SymbolTable.enterScope();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_scope",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_scope ::= 
            {
              Object RESULT =null;
		SymbolTable.exitScope();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_scope",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declList ::= decl declList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= PRI_TYPE 
            {
              ValueType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueType t = (ValueType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= type ID SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueType t = (ValueType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SymbolEntry id = (SymbolEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(id);checkDefined(id,false);id.type=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtList ::= stmtList stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmtList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= LBLOCK start_scope declList stmtList RBLOCK end_scope 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= ID ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SymbolEntry id = (SymbolEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueType e = (ValueType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		checkDefined(id,true);checkType(id.type,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= ID ASSIGN READ LPAR RPAR SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SymbolEntry id = (SymbolEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		checkDefined(id,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= ID ASSIGN READ LPAR STRING_TEXT RPAR SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SymbolEntry id = (SymbolEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		checkDefined(id,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= WRITE LPAR expr RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= WRITE LPAR STRING_TEXT RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= IF LPAR cond RPAR stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= IF LPAR cond RPAR stmt ELSE stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= WHILE LPAR cond RPAR stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= FOR LPAR stmt SEMICOLON cond SEMICOLON stmt RPAR stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= error 
            {
              Object RESULT =null;
		ErrorHandler.error_stmt(parser);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cond ::= TRUE_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cond ::= LPAR cond RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cond ::= NOT cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cond ::= cond LOGIC_OP cond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cond ::= expr COMP_OP expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= ID 
            {
              ValueType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolEntry id = (SymbolEntry)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		checkDefined(id,true); RESULT= id.type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= INT_NUMBER 
            {
              ValueType RESULT =null;
		RESULT= ValueType.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= FLOAT_NUMBER 
            {
              ValueType RESULT =null;
		RESULT= ValueType.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LPAR expr RPAR 
            {
              ValueType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValueType e = (ValueType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr MATH_OP expr 
            {
              ValueType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValueType e1 = (ValueType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValueType e2 = (ValueType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=checkType(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
